<?php

/**
 * Main module file 
 * Used for general hook implementations and the blocktype management
 * Seperated into includes, hooks and custom functions
 */

//------ INCLUDES

require_once('contentblock.controller.inc');
require_once('contentblock.helper.inc');
require_once('contentblock.field.inc');


//------ HOOKS

/**
 * Implementation of hook_entity_info()
 * Registers the content block entity type
 * 
 * @return array containing all entitiy options
 */
function contentblock_entity_info() {
  $options = array(
    'contentblock' => array(
      'label' => 'Content Block',
      'controller class' => 'ContentBlockController',
      'base table' => 'contentblock',
      'fieldable' => TRUE,
      'static cache' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'bid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full contentblock'),
          'custom settings' => FALSE,
        ),
      )
    )
  );

  //add all blocktypes as bundles
  foreach (ContentBlockHelper::getInstance()->getBlockTypes(true) as $type) {
    $options['contentblock']['bundles'][$type->type] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/structure/blocktypes/manage/%block_type',
        'real path' => 'admin/structure/blocktypes/manage/' . $type->type,
        'bundle argument' => 4,
        'access arguments' => array('administer contentblocks'),
      ),
    );
  }

  return $options;
}

/**
 * Implementation of hook_menu()
 * Defines all needed paths to access blocktypes
 * 
 * @return array containing all new paths
 */
function contentblock_menu() {
  $items = array();  
    
  $items['admin/structure/blocktypes'] = array(
    'title' => 'Contentblock types',
    'description' => 'Manage content block structure',
    'page callback' => 'contentblock_show_list',
    'access arguments' => array('administer contentblocks'),
  );
  
  $items['admin/structure/blocktypes/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/structure/blocktypes/add'] = array(
    'title' => 'Add contentblock type',
    'description' => 'Form to add a new contentblocktype',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contentblock_type_form'),
    'access arguments' => array('administer contentblocks'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/structure/blocktypes/manage/%block_type'] = array(
    'title' => 'Edit contentblock type',
    'title callback' => 'contentblock_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contentblock_type_form', 4),
    'access arguments' => array('administer contentblocks'),
  );
  
  $items['admin/structure/blocktypes/manage/%block_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/structure/blocktypes/manage/%block_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contentblock_type_delete_confirm', 4),
    'access arguments' => array('administer contentblocks'),
  );

  return $items;
}

/**
 * Implementation of hook_permissions()
 * Defines standard permissions to administer and use contentblocks
 * 
 * @return array containing standard permissions
 */
function contentblock_permission() {
  return array(
    'administer contentblocks' => array(
      'title' => t('Administer contentblocks'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implemenation of hook_theme()
 * Registers all needed theme functions
 * 
 * @return array containing all needed theme functions
 */
function contentblock_theme() {
  return array(
    'contentblock_admin_overview' => array(
      'variables' => array('type' => NULL),
    ),
    
    'contentblock_element' => array(
      'render element' => 'element',
    ),
    
    'contentblock_widget' => array(
      'render element' => 'element',
    ),
    
    'contentblock_widget_multiple' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implementation of hook_admin_menu_map()
 * Used for implementing the blocktype management into the admin menu module.
 * 
 * @return array containing all needed data for the admin menu module
 */
function contentblock_admin_menu_map() {
  $map = array();

  if (!user_access('administer contentblock types')) {
    return;
  }

  foreach (entity_get_info() as $obj_type => $info) {
    foreach ($info['bundles'] as $bundle_name => $bundle_info) {
      if (isset($bundle_info['admin'])) {
        $arguments = array();
        switch ($obj_type) {
          case 'contentblock':
            $fields = array();
            foreach (field_info_instances($obj_type, $bundle_name) as $field) {
              $fields[] = $field['field_name'];
            }
            $arguments = array(
              '%block_type' => array($bundle_name),
              '%field_ui_menu' => $fields,
            );
            break;
        }
        if (!empty($arguments)) {
          $path = $bundle_info['admin']['path'];
          $map["$path/fields/%field_ui_menu"]['parent'] = $path . "/fields";
          $map["$path/fields/%field_ui_menu"]['arguments'][] = $arguments;
        }
      }
    }
  }

  $map['admin/structure/blocktypes/manage/%block_type'] = array(
    'parent' => 'admin/structure/blocktypes',
    'arguments' => array(
      array('%block_type' => array_keys(ContentBlockHelper::getInstance()->getBlockTypes())),
    ),
  );

  return $map;
}




//------ CUSTOM FUNCTIONS

/**
 * Form to confirm blocktype deletion
 */
function contentblock_type_delete_confirm($form, &$form_state, $type) {
  $form['type'] = array('#type' => 'value', '#value' => $type->type);
  $form['name'] = array('#type' => 'value', '#value' => $type->name);

  $message = t('Are you sure you want to delete the contentblock type %type?', array('%type' => $type->name));
  $caption = '';

  $num_nodes = db_query("SELECT COUNT(*) FROM {contentblock} WHERE type = :type", array(':type' => $type->type))->fetchField();
  if ($num_nodes) {
    $caption .= '<p>' . format_plural($num_nodes, '%type is used by 1 block on your site. If you remove this contentblock type, <strong>all blocks</strong> using the %type type will be <strong>pemanently deleted</strong>.', '%type is used by @count blocks on your site. If you remove this contentblock type, <strong>all blocks</strong> using the %type type will be <strong>pemanently deleted</strong>.', array('%type' => $type->name)) . '</p>';
  }

  $caption .= '<p>' . t('This action cannot be undone.') . '</p>';
  return confirm_form($form, $message, 'admin/structure/blocktypes', $caption, t('Delete'));
}

/**
 * Submit function from blocktype deletion
 * Deletes blocktype and all associated blocks
 */
function contentblock_type_delete_confirm_submit($form, &$form_state) {
  $type = $form_state['values']['type'];

  //delete all blocks from deleted type
  db_delete('contentblock')
    ->condition('type', $type)
    ->execute();

  //delete blocktype from database
  db_delete('contentblock_type')
    ->condition('type', $type)
    ->execute();

  //delete all coresponding fields
  field_attach_delete_bundle('contentblock', $type);

  drupal_set_message(t('The contentblock type %name has been deleted.', array('%name' => $form_state['values']['name'])));
  menu_rebuild();

  $form_state['redirect'] = 'admin/structure/blocktypes';
  return;
}

/**
 * Builds a page title containg the blocktype name
 */
function contentblock_type_page_title($block_type) {
  return $block_type->name;
}

/**
 * Loads a single block type
 */
function block_type_load($type) {
  $types = ContentBlockHelper::getInstance()->getBlockTypes();
  return isset($types[$type]) ? $types[$type] : false;
}

/**
 * Blocktype form to add or edit blocktypes
 */
function contentblock_type_form($form, $form_state, $type = NULL) {
  $form = array();

  if (!isset($type->type)) {
    $type = (object) array(
        'type' => '',
        'name' => '',
        'description' => ''
    );
  }

  $form['name'] = array(
    '#type' => 'textfield',
    '#default_value' => $type->name,
    '#title' => t('Name'),
    '#required' => TRUE,
    '#description' => t('The human-readable name for this contentblock type'),
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => $type->type,
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'block_type_load',
    ),
    '#description' => t('The machine-readable name for this contentblock type'),
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#default_value' => $type->description,
    '#title' => t('Description'),
  );

  $form['old_type'] = array(
    '#type' => 'value',
    '#value' => $type->type,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validation function for blocktype forms
 * Checks for already used names
 */
function contentblock_type_form_validate($form, &$form_state) {
  $types = ContentBlockHelper::getInstance()->getBlockTypes();
  $type = db_query_range('SELECT type FROM {contentblock_type} WHERE name = :name', 0, 1, array(':name' => $form_state['values']['name']))->fetchField();

  if (!empty($type) && $types[$type]->type != $form_state['values']['old_type']) {
    form_set_error('name', t('The human-readable name %name is already taken.', array('%name' => $form_state['values']['name'])));
  }
}

/**
 * Submit function for the blocktype forms
 * Saves all block attributes in a database table
 */
function contentblock_type_form_submit($form, &$form_state) {
  $existing_type = !empty($form_state['values']['old_type']) ? $form_state['values']['old_type'] : $form_state['values']['type'];
  $is_existing = (bool) db_query_range('SELECT 1 FROM {contentblock_type} WHERE type = :type', 0, 1, array(':type' => $existing_type))->fetchField();

  $fields = array(
    'type' => (string) $form_state['values']['type'],
    'name' => (string) $form_state['values']['name'],
    'description' => (string) $form_state['values']['description'],
  );

  if ($is_existing) {
    db_update('contentblock_type')
      ->fields($fields)
      ->condition('type', $existing_type)
      ->execute();

    if (!empty($form_state['values']['old_type']) && $form_state['values']['old_type'] != $form_state['values']['type']) {
      field_attach_rename_bundle('contentblock', $form_state['values']['old_type'], $form_state['values']['type']);

      db_update('contentblock')
        ->fields(array('type' => $form_state['values']['type']))
        ->condition('type', $form_state['values']['old_type'])
        ->execute();
    }

    drupal_set_message(t('Contentblock type successfully updated'));
  } else {
    db_insert('contentblock_type')
      ->fields($fields)
      ->execute();
    field_attach_create_bundle('contentblock', $form_state['values']['type']);
    drupal_set_message(t('Contentblock type successfully added'));
  }

  menu_rebuild();

  $form_state['redirect'] = 'admin/structure/blocktypes';
  return;
}


/**
 * Page callback for the contentblock overview page
 */
function contentblock_show_list() {
  $types = ContentBlockHelper::getInstance()->getBlockTypes();
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '4'));
  $rows = array();

  foreach ($types as $type) {
    $row = array(theme('contentblock_admin_overview', array('type' => $type)));

    // Set the edit column.
    $row[] = array('data' => l(t('edit'), 'admin/structure/blocktypes/manage/' . $type->type));

    // Manage fields.
    $row[] = array('data' => l(t('manage fields'), 'admin/structure/blocktypes/manage/' . $type->type . '/fields'));

    // Display fields.
    $row[] = array('data' => l(t('manage display'), 'admin/structure/blocktypes/manage/' . $type->type . '/display'));

    // Set the delete column.
    $row[] = array('data' => l(t('delete'), 'admin/structure/blocktypes/manage/' . $type->type . '/delete'));

    $rows[] = $row;
  }

  $build['contentblock_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No contentblock types available. <a href="@link">Add contentblock type</a>.', array('@link' => url('admin/structure/blocktypes/add'))),
  );

  return $build;
}

/**
 * Theme function used on the overview page
 */
function theme_contentblock_admin_overview($variables) {
  $type = $variables['type'];

  $output = check_plain($type->name);
  $output .= ' <small>' . t('(Machine name: @type)', array('@type' => $type->type)) . '</small>';
  $output .= '<div class="description">' . filter_xss_admin($type->description) . '</div>';
  return $output;
}
